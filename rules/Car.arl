//Offer values are based on haste, current money and approximate expected waiting time if let go 
//Bidding rules:
//After getting bids from all other agents, agent processes them and decides what can he accept
//Agent may accept lower offer than his, but cannot refuse higher offer
//If there are two equal offers wins agent with bigger haste, if they have equal haste wins agent with smaller agent_id

ruleset Car {
	import java.lang.String;
	import java.lang.Math;
	import java.util.ArrayList;
	import java.util.Collections;
	import java.util.List;
	import logging.Logger;
	import simulation.agents.Agent;
	import simulation.Simulation;
	import simulation.AgentState;
	import simulation.Direction;
	import simulation.CenterPlace;
	import simulation.Action;
	import simulation.Intersection;
	import messages.OfferMsg;
	import messages.AcceptMsg;
	import com.ibm.able.rules.AbleOclSequence;
	
  	variables {
  		static Logger logger;
  	
		Agent agent;
		List cur_state;
		List offers;
		List accepts;
		
		Integer len;		
		static AgentState my_state;
		static Integer max_dist;
		static Integer min_dist;
		static List max_distances;
		static Intersection intersection;
		static CenterPlace fst_center;
		static CenterPlace lst_center;
		static Integer center_len;
		static List center_path;
		static List intersecting_agents = new ArrayList();
		static Integer offer;
		static List accepted_offers;
			
		Double expected_wait_time;
		Double expected_total_time;
		Boolean accepted;
		Double sum_wait;
		Integer payment;
		Integer new_payment;
		Boolean paying;
		Integer speed;
		Action res;	
	}

	inputs{agent, cur_state, offers, accepts};

	outputs{res};

	void process() using Script {
	variables {
		Integer new_points;
	}
	: logger = new Logger(agent.getAgentId());
	: logger.trace("processing");
	: len = agent.getLength();
	: if(offers == null and accepts == null) {
			invokeRuleBlock("processState");
		}
	: if(offers != null) {
			invokeRuleBlock("processOffers");
		} 
	: if(accepts != null) {
			invokeRuleBlock("processAccepts");
			if(paying) {
				payment = payment - offer;
			}
			logger.info("speed = %d, payment = %d", speed, payment);	
			new_points = agent.getPoints() + payment;
			agent.setPoints(new_points);
			res = Action.commit(speed);
		}
	}
	
	void processState() using Script {
	variables {
		AbleOclSequence pom_seq;
		AbleOclSequence colliding;	
		Integer i;
		AgentState car;
	}
	: logger.trace("processing State");
	: my_state = cur_state.get(agent.getAgentId());	
	: intersection = new Intersection(len);
	: wm.assertAll(cur_state);
	: max_distances = new ArrayList();
	: for(i = 0; i < cur_state.size(); i = i + 1) {
			car = cur_state.get(i);
			max_distances.add(car.getMaxSpeed());
		}
	: invokeRuleBlock("computeMaximalDistances");
	: logger.debug("maximal distances = %s", String.valueOf(max_distances));
	: wm.retract(my_state);
	: center_path = intersection.getPath(my_state);
	: if(my_state.place == Direction.C) {
			center_path.remove(0);
		}
	: center_len = center_path.size();
	: logger.debug("center_path = %s", String.valueOf(center_path));
	: wm.assertAll(intersection.getPlaces());
	: max_dist = new Integer(max_distances.get(my_state.agent_id));
	: logger.debug("max_dist = %d", max_dist);
	: invokeRuleBlock("computeAction");
	}
	
	void computeMaximalDistances() using PatternMatch {
	: logger.trace("computing maximal distances");
	: when(AgentState car (car.waiting_time > 0)) do {
			wm.retract(car);
			max_distances.set(car.agent_id, 0);
		}
	: when(AgentState car (car.waiting_time == 0) &
		AgentState blocking (blocking != car and intersection.isInFront(car, blocking) and 
							intersection.distance(car, blocking) <= max_distances.get(car.agent_id))) do {
			logger.debug("Agent %d on path of agent %d, distance %d", blocking.agent_id, car.agent_id, intersection.distance(car, blocking));
			max_distances.set(car.agent_id, intersection.distance(car, blocking) - 1);
		}
	}

	void computeAction() using Policy {
	: logger.trace("computing Action");
	[1] : preconditions (my_state.dest == my_state.place || max_dist == 0) decisions {
			//If I'm after intersection, then greedly take max possible speed
			speed = max_dist;
			res = Action.commit(speed);
			logger.info("greedy speed: %d", speed);
		}
	[1] : preconditions (my_state.place != Direction.C and my_state.position + max_dist < len) decisions {
			//If I cannot arrive intersection, act greedly
			speed = max_dist;
			res = Action.commit(speed);
			logger.info("greedy speed: %d", speed);
		}
	[0] : preconditions (true) decisions {
			min_dist = max_dist;
			invokeRuleBlock("computeStatistics");
			logger.debug("min_dist = %d", min_dist);
			if(min_dist == max_dist) {
				speed = max_dist;
				res = Action.commit(speed);			
				logger.info("greedy speed: %d", speed);
			} else {
				invokeRuleBlock("valuePlaces");
				logger.debug("expected_total_time = %f", expected_total_time);
				offer = agent.computeOffer(expected_total_time); 
				res = Action.offer(offer);
			}
		}
	}
	
	void computeStatistics() using PatternMatch {
	variables {
		Integer turns_to;
		Integer tmp;
		Integer distance;
		Integer max_car_dist;
	}
	: logger.trace("computing Statistics");
	//for every such position compute how on many agent trajectories it lies (and some addidtional statistics) 
	: when(AgentState car (car.place != car.dest) &
		CenterPlace p (intersection.onTrajectory(p, car))) do {
			distance = intersection.distance(car, p); 
			logger.debug("intersection %d on path of %d, distance=%d ", p.id, car.agent_id, distance);
			turns_to = (distance - 1) / car.max_speed;
			tmp = p.future_agents.get(turns_to) + 1;
			logger.debug("turns_to = %d, new value = %d", turns_to, tmp);
			p.future_agents.set(turns_to, tmp);
			max_car_dist = max_distances.get(car.agent_id);
			if(distance <= max_car_dist) {
				p.agents.add(car.agent_id);
				intersecting_agents.add(car.agent_id);
			}
			if(distance <= max_car_dist and center_path.contains(p)) {
				min_dist = Math.min(min_dist + 1, intersection.distance(my_state, p)) - 1;
				logger.debug("new min dist = %d", min_dist);
			}
		}
	}
	
	void valuePlaces() using PatternMatch {
	: logger.trace("computing Offer");
	: expected_total_time = 0;  	
	: when(CenterPlace p (center_path.contains(p))) do {
			expected_wait_time = 0;
			invokeRuleBlock("expectedWaiting(CenterPlace,Integer,Integer)", new Object[] {p, 0, 0});
			logger.debug("expected_wait_time = %f for place %d", expected_wait_time, p.id);
			expected_total_time = expected_total_time + expected_wait_time;
		}
	}
	
	//assume that every agent have the same chance to cross intersection in this place, and all except one will wait
	void expectedWaiting(CenterPlace place, Integer waiting_for, Integer agents_waiting) using Script {	
	variables {
		Double chance_to_go;
	}
	: agents_waiting = place.getFutureAgents().get(waiting_for) + agents_waiting;
	: if(agents_waiting != 0) {
			chance_to_go = 1/((Double) agents_waiting + 1);
			//recursively compute expected waiting if waiting now
			invokeRuleBlock("expectedWaiting(CenterPlace,Integer,Integer)", new Object[] {place, waiting_for + 1, agents_waiting - 1});
			expected_wait_time = (1 - chance_to_go) * (expected_wait_time + 1); //+ 0*chance_to_go
		} else {
			expected_wait_time = 0;
		}
	}
		
	void processOffers() using Script {
	: logger.info("processing Offers");
	: wm.assertAll(offers);
	: accepted_offers = new ArrayList();
	: logger.debug("my offer = %d", offer);  
	: invokeRuleBlock("getAccOffers");
	: res = Action.accept(accepted_offers); 
	}

	void getAccOffers() using PatternMatch {
	variables {
		AgentState car;
	}
	: when(OfferMsg m (intersecting_agents.contains(m.agent_id))) do {
			car = cur_state.get(m.agent_id);
			if(Simulation.compareOffers(m.offer, car.getHaste(), car.getAgentId(), offer, my_state.getHaste(), my_state.getAgentId()) > 0 ||
					agent.acceptsOffer(car, m.offer, offer)) {
				logger.debug("accepted offer %d from agent %d", m.offer, m.agent_id);
				accepted_offers.add(m.agent_id);
			} 
		}	
	}
	
	//TODO: solve whole accept reject graph
	//TODO: check on medium round 39
	
	void processAccepts() using PatternMatch {
	variables {
		Integer distance;
	}
	: logger.info("processing Accepts");
	: wm.assertAll(accepts);
	: speed = max_dist;
	: paying = false;
	: payment = 0;
	: new_payment = 0;
	: when(CenterPlace p (center_path.contains(p)  and !p.agents.isEmpty() and 
		speed >= intersection.distance(my_state, p) and intersection.distance(my_state, p) > min_dist)) do {
			invokeRuleBlock("checkAgents(CenterPlace)", new Object[] {p});
			if(!accepted) {
				accepted = !invokeRuleBlock("checkDeadlock");
				new_payment = 0;
			}
			if(accepted) {
				logger.debug("Cannot go further than %d, new payment = %d", distance, new_payment);
				speed = intersection.distance(my_state, p) - 1;
				payment = new_payment;
			}
		}
	}
	
	void checkAgents(CenterPlace p) using PatternMatch {
	: logger.debug("checking agents for place %d", p.getId());
	: accepted = false;
	: when(AgentState car (!accepted && p.getAgents().contains(car.agent_id)) &
		OfferMsg msg (msg.agent_id == car.agent_id) &
		AcceptMsg accept (accept.agent_id == car.agent_id)) do {
			invokeRuleBlock("checkIfAccepted(CenterPlace,AgentState)", new Object[] {p, car});
			if(accepted) {
				if(accept.offers.contains(my_state.agent_id) && 
						Simulation.compareOffers(msg.offer, car.haste, car.agent_id, offer, my_state.haste, my_state.agent_id) > 0) {
					logger.debug("I was let go by %d", car.agent_id);
					accepted = false;
					paying = true;
				} else if(accepted_offers.contains(car.agent_id)) {
					logger.debug("agent %d blocks my path on position %d", car.agent_id, p.getId());
					new_payment = msg.offer;
				} else {
					logger.debug("I block path of agent %d position %d", car.agent_id, p.getId());
					accepted = false;
					paying = true;
				}
			} else if(accepted_offers.contains(car.agent_id) && 
					Simulation.compareOffers(msg.offer, car.haste, car.agent_id, offer, my_state.haste, my_state.agent_id) < 0) {
				//if i let him go then i cannot go even if he is blocked (to prevent accept cycles), but don't get payed for staying
				logger.debug("I let go %d", car.agent_id);
				accepted = true;
			}
		}
	}
	
	void checkIfAccepted(CenterPlace dest, AgentState car) using PatternMatch {
	: logger.debug("checking if %s is accepted for %s", dest.toString(), car.toString());
	: accepted = true;
	//Find place on which car is forbidden to enter that lays on my path to the dest
	: when(CenterPlace p (intersection.distance(car, p) <= intersection.distance(car, dest)) &
		AgentState car2 (car2 != car and p.onPathOf(car2.agent_id)) &
		AcceptMsg my_msg (my_msg.agent_id == car.getAgentId() and my_msg.offers.contains(car2.getAgentId())) &
		OfferMsg my_offer (my_offer.agent_id == car.getAgentId()) &
		OfferMsg his_offer (his_offer.agent_id == car.getAgentId())
		) do { 
			if(Simulation.compareOffers(my_offer.offer, car.getHaste(), car.getAgentId(), his_offer.offer, car2.getHaste(), car2.getAgentId()) > 0) {
				logger.debug("Agent %d let Agent %d go", car.getAgentId(), car2.getAgentId());
				//If let him go, then not going further even if he cannot go (to break possible accept cycle)
				accepted = false;
				return;
			}
			//Recursively check if he can get to the point where he blocks me
			invokeRuleBlock("checkIfAccepted(CenterPlace,AgentState)", new Object[] {p, car2});
			//if he can go then I can't
			accepted = !accepted;
			if(!accepted) {
				logger.debug("place %d not accepted for Agent %d", dest.getId(), car.getAgentId());
				return;
			}
		}
	}
		
	//To avoid deadlocks, if there is possibility of 4 agents in the centre, the one with lowest offer is not allowed to enter
	Boolean checkDeadlock() using Script {
	variables {
		Integer i;
		AgentState car;
		Integer num_center;
		Integer dist;
		Boolean b;
	}
	: logger.trace("Checking against deadlock");
	: num_center = 0;
	: for(i = 0; i < cur_state.size(); ++i) {
			if(i == my_state.agent_id) {
				continue;
			}
			car = cur_state.get(i);
			if(car.getPlace() == Direction.C) {
				num_center = num_center + 1;
			} else {
				if(dist <= 2 ) {
					invokeRuleBlock("canEnterCenter(AgentState)", new Object[] {car});
					if(accepted) {
						num_center = num_center + 1;
					}
				}
			}
		}
	: logger.debug("Deadlock: Can go to center: %s", String.valueOf(num_center < 3));
	: return (num_center < 3);
	}
	
	void canEnterCenter(AgentState car) using PatternMatch {
	//if he send offer then he is able to enter the center, have to check if is accepted to do it
	: accepted = false;
	: when(OfferMsg msg (msg.agent_id == car.getAgentId())) do {
			logger.debug("Checking if agent %d with offer %d is allowed to enter center", car.getAgentId(), msg.offer);
			//if he has better offer than me
			if(Simulation.compareOffers(msg.offer, car.getHaste(), car.getAgentId(), offer, my_state.getHaste(), my_state.getAgentId()) > 0) {
				invokeRuleBlock("checkIfAccepted(CenterPlace,AgentState)", new Object[] {intersection.getFirstPlace(car), car});
			} else {
				accepted = false;
			}
		}
	}
}